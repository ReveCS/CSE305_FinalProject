package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import model.RevenueItem;

public class SalesDao {

    private List<RevenueItem> getDummyRevenueItems()
    {
        List<RevenueItem> items = new ArrayList<RevenueItem>();

		/*Sample data begins*/
        for (int i = 0; i < 10; i++) {
            RevenueItem item = new RevenueItem();
            item.setDate(new Date());
            item.setNumShares(5);
            item.setAccountId("foo");
            item.setPricePerShare(50.0);
            item.setStockSymbol("AAPL");
            item.setAmount(150.0);
            items.add(item);
        }
        /*Sample data ends*/

        return items;
    }
    public List<RevenueItem> getSalesReport(String month, String year) {

		/*
		 * The students code to fetch data from the database will be written here
		 * Query to get sales report for a particular month and year
		 */
    	List<RevenueItem> result = new ArrayList<RevenueItem>();
  
    	int monthInt = Integer.parseInt(month);
    	int yearInt = Integer.parseInt(year);
    	
    	try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stonksmaster", "root", "root");
			Statement st = con.createStatement();
			ResultSet rs = st.executeQuery("CALL SalesReport(" + monthInt + ", " + yearInt + ")");
			
			while(rs.next()) {
				RevenueItem item = new RevenueItem();
				item.setAccountId(Integer.toString(rs.getInt("AccountId")));
				item.setAmount(rs.getDouble("Total Sale"));
				item.setDate(rs.getDate("Date"));
				item.setNumShares(rs.getInt("NumShares"));
				item.setPricePerShare(rs.getDouble("PricePerShare"));
				item.setStockSymbol(rs.getString("StockSymbol"));
				result.add(item);
			}
			
		}catch (Exception e) {
			System.out.println(e);
		}
    	
        return result;

    }

    public List<RevenueItem> getSummaryListing(String searchKeyword) {

		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of summary listing of revenue generated by a particular stock,
		 * stock type or customer must be implemented
		 * Store the revenue generated by an item in the amount attribute
		 */

        return getDummyRevenueItems();
    }
}
